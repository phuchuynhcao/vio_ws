// Generated by gencpp from file devices/SpanHeader.msg
// DO NOT EDIT!


#ifndef DEVICES_MESSAGE_SPANHEADER_H
#define DEVICES_MESSAGE_SPANHEADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace devices
{
template <class ContainerAllocator>
struct SpanHeader_
{
  typedef SpanHeader_<ContainerAllocator> Type;

  SpanHeader_()
    : message()
    , port()
    , idle_time(0.0)
    , gps_status()
    , week(0)
    , second(0.0)
    , receiver_status()
    , receiver_version(0)  {
    }
  SpanHeader_(const ContainerAllocator& _alloc)
    : message(_alloc)
    , port(_alloc)
    , idle_time(0.0)
    , gps_status(_alloc)
    , week(0)
    , second(0.0)
    , receiver_status(_alloc)
    , receiver_version(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _port_type;
  _port_type port;

   typedef float _idle_time_type;
  _idle_time_type idle_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gps_status_type;
  _gps_status_type gps_status;

   typedef uint32_t _week_type;
  _week_type week;

   typedef double _second_type;
  _second_type second;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _receiver_status_type;
  _receiver_status_type receiver_status;

   typedef uint16_t _receiver_version_type;
  _receiver_version_type receiver_version;





  typedef boost::shared_ptr< ::devices::SpanHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::devices::SpanHeader_<ContainerAllocator> const> ConstPtr;

}; // struct SpanHeader_

typedef ::devices::SpanHeader_<std::allocator<void> > SpanHeader;

typedef boost::shared_ptr< ::devices::SpanHeader > SpanHeaderPtr;
typedef boost::shared_ptr< ::devices::SpanHeader const> SpanHeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::devices::SpanHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::devices::SpanHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace devices

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'devices': ['/home/nguyen/vio_ws/src/driver/devices/slider/msg', '/home/nguyen/vio_ws/src/driver/devices/span/msg', '/home/nguyen/vio_ws/src/driver/devices/wheel/msg', '/home/nguyen/vio_ws/src/driver/devices/gps/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::devices::SpanHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::devices::SpanHeader_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::devices::SpanHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::devices::SpanHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::devices::SpanHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::devices::SpanHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::devices::SpanHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e762a70f279b5ba5260c226d2b8b272";
  }

  static const char* value(const ::devices::SpanHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e762a70f279b5baULL;
  static const uint64_t static_value2 = 0x5260c226d2b8b272ULL;
};

template<class ContainerAllocator>
struct DataType< ::devices::SpanHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "devices/SpanHeader";
  }

  static const char* value(const ::devices::SpanHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::devices::SpanHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Header of information read from the SPAN-CPT system\n\
\n\
string message              # The name of the log or command (string)\n\
string port                 # The name of the port where the log was generated (string)\n\
\n\
float32 idle_time           # The minimum percentage of time the processor is idle, between successive logs, with the same message ID [%]\n\
string gps_status           # The quality of the GPS reference time (string)\n\
\n\
uint32 week                 # The GPS reference week, zero point from midnight of January 5, 1980 [week]\n\
float64 second              # Seconds since last week [seconds]\n\
\n\
string receiver_status      # Status of various hardware and software components of the receiver (4-byte hex number)\n\
uint16 receiver_version     # Reveiver software build number (0-65535)\n\
";
  }

  static const char* value(const ::devices::SpanHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::devices::SpanHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message);
      stream.next(m.port);
      stream.next(m.idle_time);
      stream.next(m.gps_status);
      stream.next(m.week);
      stream.next(m.second);
      stream.next(m.receiver_status);
      stream.next(m.receiver_version);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpanHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::devices::SpanHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::devices::SpanHeader_<ContainerAllocator>& v)
  {
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "port: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.port);
    s << indent << "idle_time: ";
    Printer<float>::stream(s, indent + "  ", v.idle_time);
    s << indent << "gps_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gps_status);
    s << indent << "week: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.week);
    s << indent << "second: ";
    Printer<double>::stream(s, indent + "  ", v.second);
    s << indent << "receiver_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.receiver_status);
    s << indent << "receiver_version: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.receiver_version);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEVICES_MESSAGE_SPANHEADER_H
