// Generated by gencpp from file devices/GpsStatus.msg
// DO NOT EDIT!


#ifndef DEVICES_MESSAGE_GPSSTATUS_H
#define DEVICES_MESSAGE_GPSSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace devices
{
template <class ContainerAllocator>
struct GpsStatus_
{
  typedef GpsStatus_<ContainerAllocator> Type;

  GpsStatus_()
    : date()
    , time(0.0)
    , numsat(0)
    , quality(0)
    , hdop(0.0)  {
    }
  GpsStatus_(const ContainerAllocator& _alloc)
    : date(_alloc)
    , time(0.0)
    , numsat(0)
    , quality(0)
    , hdop(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _date_type;
  _date_type date;

   typedef double _time_type;
  _time_type time;

   typedef int16_t _numsat_type;
  _numsat_type numsat;

   typedef int16_t _quality_type;
  _quality_type quality;

   typedef double _hdop_type;
  _hdop_type hdop;





  typedef boost::shared_ptr< ::devices::GpsStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::devices::GpsStatus_<ContainerAllocator> const> ConstPtr;

}; // struct GpsStatus_

typedef ::devices::GpsStatus_<std::allocator<void> > GpsStatus;

typedef boost::shared_ptr< ::devices::GpsStatus > GpsStatusPtr;
typedef boost::shared_ptr< ::devices::GpsStatus const> GpsStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::devices::GpsStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::devices::GpsStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::devices::GpsStatus_<ContainerAllocator1> & lhs, const ::devices::GpsStatus_<ContainerAllocator2> & rhs)
{
  return lhs.date == rhs.date &&
    lhs.time == rhs.time &&
    lhs.numsat == rhs.numsat &&
    lhs.quality == rhs.quality &&
    lhs.hdop == rhs.hdop;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::devices::GpsStatus_<ContainerAllocator1> & lhs, const ::devices::GpsStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace devices

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::devices::GpsStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::devices::GpsStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::devices::GpsStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::devices::GpsStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::devices::GpsStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::devices::GpsStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::devices::GpsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa776ee501a0e18fe7a26e4b146b0685";
  }

  static const char* value(const ::devices::GpsStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa776ee501a0e18fULL;
  static const uint64_t static_value2 = 0xe7a26e4b146b0685ULL;
};

template<class ContainerAllocator>
struct DataType< ::devices::GpsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "devices/GpsStatus";
  }

  static const char* value(const ::devices::GpsStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::devices::GpsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string date\n"
"float64 time\n"
"int16 numsat\n"
"int16 quality\n"
"float64 hdop\n"
;
  }

  static const char* value(const ::devices::GpsStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::devices::GpsStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.date);
      stream.next(m.time);
      stream.next(m.numsat);
      stream.next(m.quality);
      stream.next(m.hdop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpsStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::devices::GpsStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::devices::GpsStatus_<ContainerAllocator>& v)
  {
    s << indent << "date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.date);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "numsat: ";
    Printer<int16_t>::stream(s, indent + "  ", v.numsat);
    s << indent << "quality: ";
    Printer<int16_t>::stream(s, indent + "  ", v.quality);
    s << indent << "hdop: ";
    Printer<double>::stream(s, indent + "  ", v.hdop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEVICES_MESSAGE_GPSSTATUS_H
