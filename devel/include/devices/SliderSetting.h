// Generated by gencpp from file devices/SliderSetting.msg
// DO NOT EDIT!


#ifndef DEVICES_MESSAGE_SLIDERSETTING_H
#define DEVICES_MESSAGE_SLIDERSETTING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace devices
{
template <class ContainerAllocator>
struct SliderSetting_
{
  typedef SliderSetting_<ContainerAllocator> Type;

  SliderSetting_()
    : P_gain(0.0)
    , I_gain(0.0)
    , D_gain(0.0)  {
    }
  SliderSetting_(const ContainerAllocator& _alloc)
    : P_gain(0.0)
    , I_gain(0.0)
    , D_gain(0.0)  {
  (void)_alloc;
    }



   typedef double _P_gain_type;
  _P_gain_type P_gain;

   typedef double _I_gain_type;
  _I_gain_type I_gain;

   typedef double _D_gain_type;
  _D_gain_type D_gain;





  typedef boost::shared_ptr< ::devices::SliderSetting_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::devices::SliderSetting_<ContainerAllocator> const> ConstPtr;

}; // struct SliderSetting_

typedef ::devices::SliderSetting_<std::allocator<void> > SliderSetting;

typedef boost::shared_ptr< ::devices::SliderSetting > SliderSettingPtr;
typedef boost::shared_ptr< ::devices::SliderSetting const> SliderSettingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::devices::SliderSetting_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::devices::SliderSetting_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::devices::SliderSetting_<ContainerAllocator1> & lhs, const ::devices::SliderSetting_<ContainerAllocator2> & rhs)
{
  return lhs.P_gain == rhs.P_gain &&
    lhs.I_gain == rhs.I_gain &&
    lhs.D_gain == rhs.D_gain;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::devices::SliderSetting_<ContainerAllocator1> & lhs, const ::devices::SliderSetting_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace devices

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::devices::SliderSetting_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::devices::SliderSetting_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::devices::SliderSetting_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::devices::SliderSetting_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::devices::SliderSetting_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::devices::SliderSetting_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::devices::SliderSetting_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96232ca94773cb90951bb888425fcbed";
  }

  static const char* value(const ::devices::SliderSetting_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96232ca94773cb90ULL;
  static const uint64_t static_value2 = 0x951bb888425fcbedULL;
};

template<class ContainerAllocator>
struct DataType< ::devices::SliderSetting_<ContainerAllocator> >
{
  static const char* value()
  {
    return "devices/SliderSetting";
  }

  static const char* value(const ::devices::SliderSetting_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::devices::SliderSetting_<ContainerAllocator> >
{
  static const char* value()
  {
    return "### Message type for live configurate the slider\n"
"\n"
"# PID Controller parameters\n"
"float64 P_gain\n"
"float64 I_gain\n"
"float64 D_gain\n"
;
  }

  static const char* value(const ::devices::SliderSetting_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::devices::SliderSetting_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.P_gain);
      stream.next(m.I_gain);
      stream.next(m.D_gain);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SliderSetting_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::devices::SliderSetting_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::devices::SliderSetting_<ContainerAllocator>& v)
  {
    s << indent << "P_gain: ";
    Printer<double>::stream(s, indent + "  ", v.P_gain);
    s << indent << "I_gain: ";
    Printer<double>::stream(s, indent + "  ", v.I_gain);
    s << indent << "D_gain: ";
    Printer<double>::stream(s, indent + "  ", v.D_gain);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEVICES_MESSAGE_SLIDERSETTING_H
