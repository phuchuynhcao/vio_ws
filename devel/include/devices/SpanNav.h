// Generated by gencpp from file devices/SpanNav.msg
// DO NOT EDIT!


#ifndef DEVICES_MESSAGE_SPANNAV_H
#define DEVICES_MESSAGE_SPANNAV_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace devices
{
template <class ContainerAllocator>
struct SpanNav_
{
  typedef SpanNav_<ContainerAllocator> Type;

  SpanNav_()
    : header()
    , raw_string()  {
    }
  SpanNav_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , raw_string(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _raw_string_type;
  _raw_string_type raw_string;





  typedef boost::shared_ptr< ::devices::SpanNav_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::devices::SpanNav_<ContainerAllocator> const> ConstPtr;

}; // struct SpanNav_

typedef ::devices::SpanNav_<std::allocator<void> > SpanNav;

typedef boost::shared_ptr< ::devices::SpanNav > SpanNavPtr;
typedef boost::shared_ptr< ::devices::SpanNav const> SpanNavConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::devices::SpanNav_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::devices::SpanNav_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::devices::SpanNav_<ContainerAllocator1> & lhs, const ::devices::SpanNav_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.raw_string == rhs.raw_string;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::devices::SpanNav_<ContainerAllocator1> & lhs, const ::devices::SpanNav_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace devices

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::devices::SpanNav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::devices::SpanNav_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::devices::SpanNav_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::devices::SpanNav_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::devices::SpanNav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::devices::SpanNav_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::devices::SpanNav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d09cacb8395420a614d91e15f9502b9d";
  }

  static const char* value(const ::devices::SpanNav_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd09cacb8395420a6ULL;
  static const uint64_t static_value2 = 0x14d91e15f9502b9dULL;
};

template<class ContainerAllocator>
struct DataType< ::devices::SpanNav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "devices/SpanNav";
  }

  static const char* value(const ::devices::SpanNav_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::devices::SpanNav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message of navigation information read from the SPAN-CPT system (log INSPVAX)\n"
"\n"
"# Hedaer of this ros message\n"
"# header.seq        : consecutive increasing ID\n"
"# header.stamp      : timestamp of the message\n"
"#   .sec            : seconds\n"
"#   .nsec           : nanoseconds\n"
"# header.frame_id   : name of this data\n"
"Header header\n"
"\n"
"# # Headar of the SPAN message\n"
"# SpanHeader span_header\n"
"\n"
"# string ins_status           # Inertial Solution Status (string)\n"
"# string pos_type             # Position or Velocity Type (string)\n"
"\n"
"# float64 latitude            # Latitude [degree]\n"
"# float64 longtitude          # Longtitude [degree] \n"
"# float64 height              # Orthometric height [m]\n"
"# float32 undulation          # Geoid undulation [m]\n"
"\n"
"# float64 vel_north           # North velocity [m/s]\n"
"# float64 vel_east            # East velocity [m/s]\n"
"# float64 vel_up              # Up velocity [m/s]\n"
"\n"
"# float64 roll                # Rotation angle around Y axis of IMU frame, positive in counter-clockwise [degree]\n"
"# float64 pitch               # Rotation angle around X axis of IMU frame, positive in counter-clockwise [degree]\n"
"# float64 azimuth             # Rotation angle around Z axis of IMU frame, positive in clockwise [degree]\n"
"#                             # The total rotation sequence is (-Z)XY\n"
"\n"
"# float32 sigma_lat           # Standard deviation of latitude [m]\n"
"# float32 sigma_long          # Standard deviation of longtitude [m]\n"
"# float32 sigma_height        # Standard deviation of height [m]\n"
"\n"
"# float32 sigma_vel_north     # Standard deviation of north velocity [m/s]\n"
"# float32 sigma_vel_east      # Standard deviation of east velocity [m/s]\n"
"# float32 sigma_vel_up        # Standard deviation of up velocity [m/s]\n"
"\n"
"# float32 sigma_roll          # Standard deviation of roll [degree]\n"
"# float32 sigma_pitch         # Standard deviation of pitch [degree]\n"
"# float32 sigma_azimuth       # Standard deviation of azimuth [degree]\n"
"\n"
"# string ext_sol_stat         # Extended solution status (4-byte hex number)\n"
"# uint16 time_since_update    # Elapsed time since the last ZUPT or position update [second]\n"
"\n"
"# Raw string with time included\n"
"string raw_string\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::devices::SpanNav_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::devices::SpanNav_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.raw_string);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpanNav_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::devices::SpanNav_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::devices::SpanNav_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "raw_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.raw_string);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEVICES_MESSAGE_SPANNAV_H
