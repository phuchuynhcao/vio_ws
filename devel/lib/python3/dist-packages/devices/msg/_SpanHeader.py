# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from devices/SpanHeader.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SpanHeader(genpy.Message):
  _md5sum = "8e762a70f279b5ba5260c226d2b8b272"
  _type = "devices/SpanHeader"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Header of information read from the SPAN-CPT system

string message              # The name of the log or command (string)
string port                 # The name of the port where the log was generated (string)

float32 idle_time           # The minimum percentage of time the processor is idle, between successive logs, with the same message ID [%]
string gps_status           # The quality of the GPS reference time (string)

uint32 week                 # The GPS reference week, zero point from midnight of January 5, 1980 [week]
float64 second              # Seconds since last week [seconds]

string receiver_status      # Status of various hardware and software components of the receiver (4-byte hex number)
uint16 receiver_version     # Reveiver software build number (0-65535)
"""
  __slots__ = ['message','port','idle_time','gps_status','week','second','receiver_status','receiver_version']
  _slot_types = ['string','string','float32','string','uint32','float64','string','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       message,port,idle_time,gps_status,week,second,receiver_status,receiver_version

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpanHeader, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.message is None:
        self.message = ''
      if self.port is None:
        self.port = ''
      if self.idle_time is None:
        self.idle_time = 0.
      if self.gps_status is None:
        self.gps_status = ''
      if self.week is None:
        self.week = 0
      if self.second is None:
        self.second = 0.
      if self.receiver_status is None:
        self.receiver_status = ''
      if self.receiver_version is None:
        self.receiver_version = 0
    else:
      self.message = ''
      self.port = ''
      self.idle_time = 0.
      self.gps_status = ''
      self.week = 0
      self.second = 0.
      self.receiver_status = ''
      self.receiver_version = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.port
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.idle_time
      buff.write(_get_struct_f().pack(_x))
      _x = self.gps_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Id().pack(_x.week, _x.second))
      _x = self.receiver_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.receiver_version
      buff.write(_get_struct_H().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.port = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.port = str[start:end]
      start = end
      end += 4
      (self.idle_time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gps_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gps_status = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.week, _x.second,) = _get_struct_Id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.receiver_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.receiver_status = str[start:end]
      start = end
      end += 2
      (self.receiver_version,) = _get_struct_H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.port
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.idle_time
      buff.write(_get_struct_f().pack(_x))
      _x = self.gps_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Id().pack(_x.week, _x.second))
      _x = self.receiver_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.receiver_version
      buff.write(_get_struct_H().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.port = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.port = str[start:end]
      start = end
      end += 4
      (self.idle_time,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gps_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gps_status = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.week, _x.second,) = _get_struct_Id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.receiver_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.receiver_status = str[start:end]
      start = end
      end += 2
      (self.receiver_version,) = _get_struct_H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
